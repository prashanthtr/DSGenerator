import numpy as np
#import seaborn as sns
from scipy import signal
import math
#import sys

from genericsynth import synthInterface as SI

'''
1. The drip texture is generated by a continuous frequency sweep from start frequency (cf) to a range (sweep) of frequency movement away from cf. <br>
2. The model is specified by four parameters, CF, sweep, decay, and decay variation <br>
3. CF is specified at the user level.
3. Three synthesizer specific parameters control the timbre of the drip sound: <br>
    3.1 Sweep : Range of frequencies traveresed for the frequency sweep.
    3.2 Decay : Controls the time after which the drip signal is attentuated.
    3.3 DecayVar : Variation on the center decay time <br>
4. A synthesizer loop runs through the parameter values for a specified duration to generate drip audio samples
'''

class MySoundModel(SI.MySoundModel) :

        def __init__(self, cf=4, sweep=10, startAmp=0.5, ampRange=0.25) :
                SI. MySoundModel.__init__(self)
                #create a dictionary of the parameters this synth will use
                self.__addParam__("cf", 4, 30, cf)
                self.__addParam__("sweep", 0, 10, sweep)

        '''
        Override of base model method
        Frequency sweeper for a drip sound
        A = sine wave amplitude
        sr = sample rate (Hz)
        cf = initial frequency (Hz)
        sweep = sweep range (Hz)
        startAmp = initial amplitude
        ampRange = Range of starting amplitude
        '''

        def sawtoothGeneration(self, n, samples):
            period = math.floor(samples/n)
            amp_env = SI.gesture(0.4,0.05, 0.6, period)
            synth_out = []
            numSamples = samples        # 1 second * 16000 sample rate
            for p in range(n):
                for index in range(period):
                    A = amp_env[index]
                    cutoff = 0.3 + 0.5*np.random.random()
                    val = 2*abs(index/period - math.floor(index/period + cutoff))
                    synth_out.append(val)
            return synth_out

        def generate(self, sigLenSecs):


            '''Interface level parameters'''
            # notation for this method
            cf=self.getParam("cf")
            sweep =self.getParam("sweep")

            n_secs = 1
            samples = int(n_secs*16000)
            nInterp = 8+int(4*np.random.random()) #number of interpolating points
            maxPoint = 0.4
            freq_sweep = SI.genericGesture(cf, cf+sweep, maxPoint, nInterp) #odd number, 0.5 for equal cut off
            # something about the duratin of the sound and the ratio (number of samples to peak) of the time to the peak value ~0.5
            samplesPerFreq = int(samples/len(freq_sweep))
            sig = np.concatenate([self.sawtoothGeneration(int(f),samplesPerFreq) for f in freq_sweep])

            return sig